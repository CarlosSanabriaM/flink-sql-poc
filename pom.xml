<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.myorg.quickstart</groupId>
	<artifactId>flink-sql-poc</artifactId>
	<name>Flink SQL POC</name>
	<version>2.0.0</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<target.java.version>11</target.java.version>
		<flink.version>1.15.0</flink.version>
		<lombok.version>1.18.24</lombok.version>
		<log4j.version>2.17.2</log4j.version>
		<maven.compiler.source>${target.java.version}</maven.compiler.source>
		<maven.compiler.target>${target.java.version}</maven.compiler.target>
	</properties>

	<dependencies>
		<!-- region Flink APIs dependencies -->
		<!-- All of these dependencies must be in provided scope -->
		<!-- They are needed to compile against, but should not be packaged into the projectâ€™s resulting application JAR file. -->

		<!-- https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/dev/configuration/overview/#flink-apis -->
		<!-- Table API + DataStream -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-table-api-java-bridge</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/dev/configuration/overview/#running-and-packaging -->
		<!-- If you want to run your job by simply executing the main class, you will need flink-runtime in your classpath. -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-runtime</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- In case of Table API programs, you will also need flink-table-runtime and flink-table-planner-loader. -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-table-runtime</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-table-planner-loader</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- RocksDB state backend -->
		<!-- https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/ops/state/state_backends/#setting-the-per-job-state-backend -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-statebackend-rocksdb</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- Required to be able to execute Flink in the IDE (IntelliJ) -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-clients</artifactId>
			<version>${flink.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- endregion -->

		<!-- region Connectors and formats -->
		<!-- All of these dependencies must be in compile scope -->
		<!-- This will allow you to package the application code and all its required dependencies into one fat/uber JAR. -->
		<!-- This includes packaging connectors, formats, and third-party dependencies of your job. -->
		<!-- Kafka connector -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-connector-kafka</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<!-- Json format -->
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-json</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<!-- endregion -->

		<!-- region 3rd party dependencies -->
		<!-- All of these dependencies must be in compile scope -->
		<!-- This will allow you to package the application code and all its required dependencies into one fat/uber JAR. -->
		<!-- This includes packaging connectors, formats, and third-party dependencies of your job. -->
		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<!-- Owner (library to ease the use of .properties files) -->
		<!-- http://owner.aeonbits.org/ -->
		<dependency>
			<groupId>org.aeonbits.owner</groupId>
			<artifactId>owner</artifactId>
			<version>1.0.12</version>
		</dependency>
		<!-- endregion -->

		<!-- region Logging -->
		<!-- All of these dependencies must be in runtime scope -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- endregion -->
	</dependencies>

	<build>
		<plugins>

			<!-- Java Compiler -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>${target.java.version}</release>
				</configuration>
			</plugin>

			<!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. -->
			<!-- Change the value of <mainClass>...</mainClass> if your program entry point changes. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.4</version>
				<executions>
					<!-- Run shade goal on package phase -->
					<execution>
						<id>shade</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<excludes>
									<exclude>org.apache.flink:flink-shaded-force-shading</exclude>
									<exclude>com.google.code.findbugs:jsr305</exclude>
									<exclude>org.slf4j:*</exclude>
									<exclude>org.apache.logging.log4j:*</exclude>
								</excludes>
							</artifactSet>
							<filters>
								<filter>
									<!-- Do not copy the signatures in the META-INF folder.
									Otherwise, this might cause SecurityExceptions when using the JAR. -->
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
							<transformers combine.children="append">
								<!-- The service transformer is needed to merge META-INF/services files -->
								<!-- If the project uses more than one Flink Table/SQL connector, the SPI resource files of the
								connectors will override each other when building the uber-jar of the project,
								which will cause Flink to fail to load table connector/format factories -->
								<!-- In this situation, the recommended way is transforming these resource files
								under the directory META-INF/services by ServicesResourceTransformer of maven shade plugin. -->
								<!-- https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/#transform-table-connectorformat-resources -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
								<!-- Program entry point -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.myorg.quickstart.job.SqlJob</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
